"use client";
import {
  useComboboxList
} from "../__chunks/KFUKDUTY.js";
import {
  useComboboxProviderContext
} from "../__chunks/MTC2KUZZ.js";
import "../__chunks/IB7YUKH5.js";
import "../__chunks/4UUKJZ4V.js";
import {
  usePopover
} from "../__chunks/KB2HXEVC.js";
import {
  createDialogComponent
} from "../__chunks/U7WGY7YX.js";
import "../__chunks/JSLLR7RC.js";
import "../__chunks/CLF4PQ7T.js";
import "../__chunks/BULCTPRV.js";
import "../__chunks/6BJGLK2C.js";
import "../__chunks/CS347UVZ.js";
import "../__chunks/IUB2BTEK.js";
import "../__chunks/XHJGS6Z5.js";
import "../__chunks/TL67WVI6.js";
import "../__chunks/MKDDWKFK.js";
import "../__chunks/OOBDFMJL.js";
import "../__chunks/677M2CI3.js";
import "../__chunks/6GXEOXGT.js";
import "../__chunks/72E5EPFF.js";
import "../__chunks/X6WIMZJE.js";
import "../__chunks/HPP6CWMY.js";
import "../__chunks/UYRJLDVS.js";
import "../__chunks/E3XM3D67.js";
import "../__chunks/CHKJ74UC.js";
import "../__chunks/7452U3HH.js";
import "../__chunks/XPF5GU3Q.js";
import "../__chunks/FSFPRQFR.js";
import "../__chunks/A7CE3X6M.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import "../__chunks/KK7H3W2B.js";
import "../__chunks/SHA3WOPI.js";
import "../__chunks/BG6HZDS7.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import "../__chunks/2N7L2ZZE.js";
import "../__chunks/CVWFS4PP.js";
import "../__chunks/XF5ITC6P.js";
import "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/combobox/combobox-popover.tsx
import { matches } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
function isController(target, ...ids) {
  if (!target)
    return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls="${id}"]`).join(", ");
    if (!selector)
      return false;
    return matches(target, selector);
  }
  return false;
}
var useComboboxPopover = createHook(
  (_a) => {
    var _b = _a, {
      store,
      tabIndex,
      alwaysVisible,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "tabIndex",
      "alwaysVisible",
      "hideOnInteractOutside"
    ]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxPopover must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const baseElement = store.useState("baseElement");
    props = useComboboxList(__spreadValues({ store, alwaysVisible }, props));
    props = usePopover(__spreadProps(__spreadValues({
      store,
      alwaysVisible,
      autoFocusOnShow: false,
      autoFocusOnHide: false,
      finalFocus: baseElement,
      preserveTabOrderAnchor: null
    }, props), {
      // Combobox popovers can't be modal because the focus may be (and is by
      // default) outside of it on the combobox input element.
      modal: false,
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside: (event) => {
        var _a2, _b2;
        const state = store == null ? void 0 : store.getState();
        const contentId = (_a2 = state == null ? void 0 : state.contentElement) == null ? void 0 : _a2.id;
        const baseId = (_b2 = state == null ? void 0 : state.baseElement) == null ? void 0 : _b2.id;
        if (isController(event.target, contentId, baseId))
          return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useComboboxPopover(props);
    return createElement("div", htmlProps);
  }),
  useComboboxProviderContext
);
if (process.env.NODE_ENV !== "production") {
  ComboboxPopover.displayName = "ComboboxPopover";
}
export {
  ComboboxPopover,
  useComboboxPopover
};
