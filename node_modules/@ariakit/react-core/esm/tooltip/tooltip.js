"use client";
import {
  useHovercard
} from "../__chunks/YGJUONJM.js";
import "../__chunks/YMV43K4F.js";
import "../__chunks/KB2HXEVC.js";
import {
  createDialogComponent
} from "../__chunks/U7WGY7YX.js";
import "../__chunks/JSLLR7RC.js";
import "../__chunks/CLF4PQ7T.js";
import "../__chunks/BULCTPRV.js";
import "../__chunks/6BJGLK2C.js";
import "../__chunks/CS347UVZ.js";
import "../__chunks/IUB2BTEK.js";
import "../__chunks/XHJGS6Z5.js";
import "../__chunks/TL67WVI6.js";
import "../__chunks/MKDDWKFK.js";
import "../__chunks/OOBDFMJL.js";
import "../__chunks/677M2CI3.js";
import "../__chunks/6GXEOXGT.js";
import "../__chunks/72E5EPFF.js";
import "../__chunks/X6WIMZJE.js";
import "../__chunks/HPP6CWMY.js";
import "../__chunks/UYRJLDVS.js";
import "../__chunks/E3XM3D67.js";
import "../__chunks/CHKJ74UC.js";
import "../__chunks/7452U3HH.js";
import "../__chunks/XPF5GU3Q.js";
import "../__chunks/FSFPRQFR.js";
import "../__chunks/A7CE3X6M.js";
import {
  TooltipScopedContextProvider,
  useTooltipProviderContext
} from "../__chunks/MNFF5YOJ.js";
import "../__chunks/TI7CMBHW.js";
import "../__chunks/7H5KSHHF.js";
import "../__chunks/G6BJYYBK.js";
import "../__chunks/OAYFXAQ2.js";
import "../__chunks/KK7H3W2B.js";
import "../__chunks/SHA3WOPI.js";
import "../__chunks/BG6HZDS7.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/3ORBWXWF.js";
import "../__chunks/2N7L2ZZE.js";
import "../__chunks/CVWFS4PP.js";
import "../__chunks/XF5ITC6P.js";
import {
  useWrapElement
} from "../__chunks/6O5OEQGF.js";
import "../__chunks/XM66DUTO.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/4R3V3JGP.js";

// src/tooltip/tooltip.tsx
import { contains } from "@ariakit/core/utils/dom";
import { invariant, isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useTooltip = createHook(
  (_a) => {
    var _b = _a, {
      store,
      portal = true,
      gutter = 8,
      preserveTabOrder = false,
      hideOnHoverOutside = true,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "portal",
      "gutter",
      "preserveTabOrder",
      "hideOnHoverOutside",
      "hideOnInteractOutside"
    ]);
    const context = useTooltipProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "Tooltip must receive a `store` prop or be wrapped in a TooltipProvider component."
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TooltipScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const role = store.useState(
      (state) => state.type === "description" ? "tooltip" : "none"
    );
    props = __spreadValues({ role }, props);
    props = useHovercard(__spreadProps(__spreadValues({}, props), {
      store,
      portal,
      gutter,
      preserveTabOrder,
      hideOnHoverOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnHoverOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if ("focusVisible" in anchorElement.dataset)
          return false;
        return true;
      },
      hideOnInteractOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnInteractOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if (contains(anchorElement, event.target))
          return false;
        return true;
      }
    }));
    return props;
  }
);
var Tooltip = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useTooltip(props);
    return createElement("div", htmlProps);
  }),
  useTooltipProviderContext
);
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
export {
  Tooltip,
  useTooltip
};
