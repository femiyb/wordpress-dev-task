{"version":3,"names":["getPhrasingContentSchema","removeInvalidHTML","htmlToBlocks","hasBlockSupport","getBlockInnerHTML","parse","normaliseBlocks","specialCommentConverter","commentRemover","isInlineContent","phrasingContentReducer","headRemover","msListConverter","msListIgnore","listReducer","imageCorrector","blockquoteNormaliser","divNormaliser","figureContentReducer","shortcodeConverter","markdownConverter","iframeRemover","googleDocsUIDRemover","htmlFormattingRemover","brRemover","deepFilterHTML","isPlain","getBlockContentSchema","emptyParagraphRemover","slackParagraphCorrector","console","window","filterInlineHTML","HTML","inline","log","pasteHandler","plainText","mode","tagName","replace","content","indexOf","String","prototype","normalize","isPlainText","test","pieces","hasShortcodes","length","phrasingContentSchema","blockContentSchema","blocks","map","piece","filters","schema","flat","filter","Boolean","name","trimRegex","trimmedPlainText"],"sources":["@wordpress/blocks/src/api/raw-handling/paste-handler.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getPhrasingContentSchema, removeInvalidHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { htmlToBlocks } from './html-to-blocks';\nimport { hasBlockSupport } from '../registration';\nimport { getBlockInnerHTML } from '../serializer';\nimport parse from '../parser';\nimport normaliseBlocks from './normalise-blocks';\nimport specialCommentConverter from './special-comment-converter';\nimport commentRemover from './comment-remover';\nimport isInlineContent from './is-inline-content';\nimport phrasingContentReducer from './phrasing-content-reducer';\nimport headRemover from './head-remover';\nimport msListConverter from './ms-list-converter';\nimport msListIgnore from './ms-list-ignore';\nimport listReducer from './list-reducer';\nimport imageCorrector from './image-corrector';\nimport blockquoteNormaliser from './blockquote-normaliser';\nimport divNormaliser from './div-normaliser';\nimport figureContentReducer from './figure-content-reducer';\nimport shortcodeConverter from './shortcode-converter';\nimport markdownConverter from './markdown-converter';\nimport iframeRemover from './iframe-remover';\nimport googleDocsUIDRemover from './google-docs-uid-remover';\nimport htmlFormattingRemover from './html-formatting-remover';\nimport brRemover from './br-remover';\nimport { deepFilterHTML, isPlain, getBlockContentSchema } from './utils';\nimport emptyParagraphRemover from './empty-paragraph-remover';\nimport slackParagraphCorrector from './slack-paragraph-corrector';\n\n/**\n * Browser dependencies\n */\nconst { console } = window;\n\n/**\n * Filters HTML to only contain phrasing content.\n *\n * @param {string} HTML The HTML to filter.\n *\n * @return {string} HTML only containing phrasing content.\n */\nfunction filterInlineHTML( HTML ) {\n\tHTML = deepFilterHTML( HTML, [\n\t\theadRemover,\n\t\tgoogleDocsUIDRemover,\n\t\tmsListIgnore,\n\t\tphrasingContentReducer,\n\t\tcommentRemover,\n\t] );\n\tHTML = removeInvalidHTML( HTML, getPhrasingContentSchema( 'paste' ), {\n\t\tinline: true,\n\t} );\n\n\tHTML = deepFilterHTML( HTML, [ htmlFormattingRemover, brRemover ] );\n\n\t// Allows us to ask for this information when we get a report.\n\tconsole.log( 'Processed inline HTML:\\n\\n', HTML );\n\n\treturn HTML;\n}\n\n/**\n * Converts an HTML string to known blocks. Strips everything else.\n *\n * @param {Object} options\n * @param {string} [options.HTML]      The HTML to convert.\n * @param {string} [options.plainText] Plain text version.\n * @param {string} [options.mode]      Handle content as blocks or inline content.\n *                                     * 'AUTO': Decide based on the content passed.\n *                                     * 'INLINE': Always handle as inline content, and return string.\n *                                     * 'BLOCKS': Always handle as blocks, and return array of blocks.\n * @param {Array}  [options.tagName]   The tag into which content will be inserted.\n *\n * @return {Array|string} A list of blocks or a string, depending on `handlerMode`.\n */\nexport function pasteHandler( {\n\tHTML = '',\n\tplainText = '',\n\tmode = 'AUTO',\n\ttagName,\n} ) {\n\t// First of all, strip any meta tags.\n\tHTML = HTML.replace( /<meta[^>]+>/g, '' );\n\t// Strip Windows markers.\n\tHTML = HTML.replace(\n\t\t/^\\s*<html[^>]*>\\s*<body[^>]*>(?:\\s*<!--\\s*StartFragment\\s*-->)?/i,\n\t\t''\n\t);\n\tHTML = HTML.replace(\n\t\t/(?:<!--\\s*EndFragment\\s*-->\\s*)?<\\/body>\\s*<\\/html>\\s*$/i,\n\t\t''\n\t);\n\n\t// If we detect block delimiters in HTML, parse entirely as blocks.\n\tif ( mode !== 'INLINE' ) {\n\t\t// Check plain text if there is no HTML.\n\t\tconst content = HTML ? HTML : plainText;\n\n\t\tif ( content.indexOf( '<!-- wp:' ) !== -1 ) {\n\t\t\treturn parse( content );\n\t\t}\n\t}\n\n\t// Normalize unicode to use composed characters.\n\t// This is unsupported in IE 11 but it's a nice-to-have feature, not mandatory.\n\t// Not normalizing the content will only affect older browsers and won't\n\t// entirely break the app.\n\t// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\t// See: https://core.trac.wordpress.org/ticket/30130\n\t// See: https://github.com/WordPress/gutenberg/pull/6983#pullrequestreview-125151075\n\tif ( String.prototype.normalize ) {\n\t\tHTML = HTML.normalize();\n\t}\n\n\t// Must be run before checking if it's inline content.\n\tHTML = deepFilterHTML( HTML, [ slackParagraphCorrector ] );\n\n\t// Consider plain text if:\n\t// * There is a plain text version.\n\t// * There is no HTML version, or it has no formatting.\n\tconst isPlainText = plainText && ( ! HTML || isPlain( HTML ) );\n\n\t// Parse Markdown (and encoded HTML) if it's considered plain text.\n\tif ( isPlainText ) {\n\t\tHTML = plainText;\n\n\t\t// The markdown converter (Showdown) trims whitespace.\n\t\tif ( ! /^\\s+$/.test( plainText ) ) {\n\t\t\tHTML = markdownConverter( HTML );\n\t\t}\n\t}\n\n\t// An array of HTML strings and block objects. The blocks replace matched\n\t// shortcodes.\n\tconst pieces = shortcodeConverter( HTML );\n\n\t// The call to shortcodeConverter will always return more than one element\n\t// if shortcodes are matched. The reason is when shortcodes are matched\n\t// empty HTML strings are included.\n\tconst hasShortcodes = pieces.length > 1;\n\n\tif ( isPlainText && ! hasShortcodes ) {\n\t\t// Switch to inline mode if:\n\t\t// * The current mode is AUTO.\n\t\t// * The original plain text had no line breaks.\n\t\t// * The original plain text was not an HTML paragraph.\n\t\t// * The converted text is just a paragraph.\n\t\tif (\n\t\t\tmode === 'AUTO' &&\n\t\t\tplainText.indexOf( '\\n' ) === -1 &&\n\t\t\tplainText.indexOf( '<p>' ) !== 0 &&\n\t\t\tHTML.indexOf( '<p>' ) === 0\n\t\t) {\n\t\t\tmode = 'INLINE';\n\t\t}\n\t}\n\n\tif ( mode === 'INLINE' ) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tif (\n\t\tmode === 'AUTO' &&\n\t\t! hasShortcodes &&\n\t\tisInlineContent( HTML, tagName )\n\t) {\n\t\treturn filterInlineHTML( HTML );\n\t}\n\n\tconst phrasingContentSchema = getPhrasingContentSchema( 'paste' );\n\tconst blockContentSchema = getBlockContentSchema( 'paste' );\n\n\tconst blocks = pieces\n\t\t.map( ( piece ) => {\n\t\t\t// Already a block from shortcode.\n\t\t\tif ( typeof piece !== 'string' ) {\n\t\t\t\treturn piece;\n\t\t\t}\n\n\t\t\tconst filters = [\n\t\t\t\tgoogleDocsUIDRemover,\n\t\t\t\tmsListConverter,\n\t\t\t\theadRemover,\n\t\t\t\tlistReducer,\n\t\t\t\timageCorrector,\n\t\t\t\tphrasingContentReducer,\n\t\t\t\tspecialCommentConverter,\n\t\t\t\tcommentRemover,\n\t\t\t\tiframeRemover,\n\t\t\t\tfigureContentReducer,\n\t\t\t\tblockquoteNormaliser,\n\t\t\t\tdivNormaliser,\n\t\t\t];\n\n\t\t\tconst schema = {\n\t\t\t\t...blockContentSchema,\n\t\t\t\t// Keep top-level phrasing content, normalised by `normaliseBlocks`.\n\t\t\t\t...phrasingContentSchema,\n\t\t\t};\n\n\t\t\tpiece = deepFilterHTML( piece, filters, blockContentSchema );\n\t\t\tpiece = removeInvalidHTML( piece, schema );\n\t\t\tpiece = normaliseBlocks( piece );\n\t\t\tpiece = deepFilterHTML(\n\t\t\t\tpiece,\n\t\t\t\t[ htmlFormattingRemover, brRemover, emptyParagraphRemover ],\n\t\t\t\tblockContentSchema\n\t\t\t);\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\tconsole.log( 'Processed HTML piece:\\n\\n', piece );\n\n\t\t\treturn htmlToBlocks( piece, pasteHandler );\n\t\t} )\n\t\t.flat()\n\t\t.filter( Boolean );\n\n\t// If we're allowed to return inline content, and there is only one\n\t// inlineable block, and the original plain text content does not have any\n\t// line breaks, then treat it as inline paste.\n\tif (\n\t\tmode === 'AUTO' &&\n\t\tblocks.length === 1 &&\n\t\thasBlockSupport( blocks[ 0 ].name, '__unstablePasteTextInline', false )\n\t) {\n\t\tconst trimRegex = /^[\\n]+|[\\n]+$/g;\n\t\t// Don't catch line breaks at the start or end.\n\t\tconst trimmedPlainText = plainText.replace( trimRegex, '' );\n\n\t\tif (\n\t\t\ttrimmedPlainText !== '' &&\n\t\t\ttrimmedPlainText.indexOf( '\\n' ) === -1\n\t\t) {\n\t\t\treturn removeInvalidHTML(\n\t\t\t\tgetBlockInnerHTML( blocks[ 0 ] ),\n\t\t\t\tphrasingContentSchema\n\t\t\t).replace( trimRegex, '' );\n\t\t}\n\t}\n\n\treturn blocks;\n}\n"],"mappings":"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"}